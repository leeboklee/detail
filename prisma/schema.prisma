generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Hotel {
  id           String     @id @default(cuid())
  hotelName    String
  description  String?
  address      String?
  tel          String?
  features     Json?      @default("[]")
  images       Json?      @default("[]")
  isTemplate   Boolean    @default(false)
  templateName String?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  facilities   Facility[]
  notices      Notice[]
  packages     Package[]
  rooms        Room[]
  sessions     Session[]

  @@index([isTemplate])
  @@index([isActive])
  @@index([createdAt])
  @@map("hotels")
}

model Room {
  id           String   @id @default(cuid())
  hotelId      String
  roomType     String
  price        Float
  maxOccupancy Int
  description  String?
  images       Json?    @default("[]")
  amenities    Json?    @default("[]")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  hotel        Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([isActive])
  @@map("rooms")
}

model Facility {
  id          String   @id @default(cuid())
  hotelId     String
  name        String
  description String?
  category    String?
  icon        String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hotel       Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([category])
  @@map("facilities")
}

model Package {
  id            String    @id @default(cuid())
  hotelId       String
  title         String
  description   String?
  price         Float
  originalPrice Float?
  images        Json?     @default("[]")
  features      Json?     @default("[]")
  terms         String?
  validFrom     DateTime?
  validTo       DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hotel         Hotel     @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([isActive])
  @@index([validFrom, validTo])
  @@map("packages")
}

model Notice {
  id        String   @id @default(cuid())
  hotelId   String
  title     String
  content   String
  priority  Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotel     Hotel    @relation(fields: [hotelId], references: [id], onDelete: Cascade)

  @@index([hotelId])
  @@index([priority])
  @@index([isActive])
  @@map("notices")
}

model PackageTemplate {
  id        String   @id @default(cuid())
  name      String
  packages  Json
  hotelId   String   @default("default")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([isActive])
  @@map("package_templates")
}

model RoomTemplate {
  id        String   @id @default(cuid())
  name      String
  rooms     Json
  hotelId   String   @default("default")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([isActive])
  @@map("room_templates")
}

model NoticeTemplate {
  id        String   @id @default(cuid())
  name      String
  notices   Json
  hotelId   String   @default("default")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([isActive])
  @@map("notice_templates")
}

model BookingInfo {
  id              String   @id @default(cuid())
  hotelId         String   @default("default")
  title           String   @default("숙박권 구매안내")
  purchaseGuide   String   // 숙박권 구매안내 내용
  referenceNotes  String   // 참고사항 내용
  kakaoChannel    String?  // 카톡 채널 정보
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([hotelId])
  @@index([isActive])
  @@map("booking_info")
}

model PriceTemplate {
  id        String   @id @default(cuid())
  name      String
  template  Json
  hotelId   String   @default("default")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([hotelId])
  @@index([isActive])
  @@map("price_templates")
}

model Session {
  id          String    @id @default(cuid())
  hotelId     String?
  sessionData Json
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  hotel       Hotel?    @relation(fields: [hotelId], references: [id])

  @@index([hotelId])
  @@index([createdAt])
  @@index([expiresAt])
  @@map("sessions")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      String   @default("user")
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
  @@map("users")
}

model Log {
  id        String   @id @default(cuid())
  level     String
  message   String
  data      Json?
  source    String?
  createdAt DateTime @default(now())

  @@index([level])
  @@index([source])
  @@index([createdAt])
  @@map("logs")
}
