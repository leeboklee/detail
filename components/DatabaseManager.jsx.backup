import React, { useState, useEffect } from 'react';

export default function DatabaseManager({ currentData, updateData }) {
  const [hotels, setHotels] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [message, setMessage] = useState('');
  const [dbStatus, setDbStatus] = useState(null);
  
  // 인라인 호텔 생성 폼 상태
  const [isCreatingNew, setIsCreatingNew] = useState(false);
  const [newHotelForm, setNewHotelForm] = useState({
    name: '',
    description: '',
    address: '',
    phone: '',
    checkin_time: '15:00',
    checkout_time: '11:00'
  });
  
  // 현재 작업 중인 프로젝트 (호텔명 + 패키지명 조합)
  const [currentProject, setCurrentProject] = useState(() => {
    if (typeof window !== 'undefined') {
      try {
        const saved = localStorage.getItem('currentProject');
        return saved ? JSON.parse(saved) : null;
      } catch (error) {
        console.error('localStorage 복원 실패:', error);
        return null;
      }
    }
    return null;
  });

  // 최근 작업 이력
  const [recentProjects, setRecentProjects] = useState(() => {
    if (typeof window !== 'undefined') {
      try {
        const saved = localStorage.getItem('recentProjects');
        return saved ? JSON.parse(saved) : [];
      } catch (error) {
        return [];
      }
    }
    return [];
  });

  // 프로젝트 템플릿 목록 (호텔 데이터를 템플릿으로 변환)
  const [templates, setTemplates] = useState([]);

  // 프로젝트 정보를 localStorage에 저장
  useEffect(() => {
    if (typeof window !== 'undefined' && currentProject) {
      try {
        localStorage.setItem('currentProject', JSON.stringify(currentProject));
        
        // 최근 프로젝트 목록에 추가 (중복 제거)
        const updated = [currentProject, ...recentProjects.filter(p => 
          p.fullName !== currentProject.fullName
        )].slice(0, 10); // 최대 10개만 유지
        
        setRecentProjects(updated);
        localStorage.setItem('recentProjects', JSON.stringify(updated));
      } catch (error) {
        console.error('localStorage 저장 실패:', error);
      }
    }
  }, [currentProject]);

  // 현재 데이터 변경 감지 및 프로젝트 정보 동기화
  useEffect(() => {
    if (currentData?.hotel?.name) {
      const packageName = extractPackageName(currentData);
      const hotelName = currentData.hotel.name;
      const fullName = `${hotelName} ${packageName}`;
      
      // 프로젝트 정보 업데이트
      setCurrentProject(prev => {
        // 새로운 프로젝트인 경우
        if (!prev || prev.fullName !== fullName) {
          return {
            hotelName,
            packageName,
            fullName,
            lastModified: new Date().toISOString(),
            isModified: true,
            version: prev?.version || '1.0',
            id: prev?.id || null,
            isNew: !prev?.id
          };
        }
        
        // 기존 프로젝트에서 수정이 발생한 경우
        if (!prev.isModified) {
          return {
            ...prev,
            hotelName,
            packageName,
            fullName,
            isModified: true,
            lastModified: new Date().toISOString()
          };
        }
        
        return {
          ...prev,
          hotelName,
          packageName,
          fullName
        };
      });
    }
  }, [currentData]);

  // 패키지명 추출 함수
  const extractPackageName = (data) => {
    if (data?.packages && data.packages.length > 0) {
      return data.packages[0].name || '기본 패키지';
    }
    return '표준 PKG';
  };

  // 메시지 표시 함수
  const showMessage = (msg, type = 'info') => {
    setMessage({ text: msg, type });
    setTimeout(() => setMessage(''), 5000);
  };

  // 데이터베이스 상태 확인
  const checkDatabaseStatus = async () => {
    try {
      const response = await fetch('/api/init-db');
      const result = await response.json();
      
      const hotelsResponse = await fetch('/api/hotels');
      const hotelsData = await hotelsResponse.json();
      
      setDbStatus({
        ...result,
        statistics: {
          ...result.statistics,
          hotels: hotelsData.length
        }
      });
      
      if (result.success) {
        showMessage('데이터베이스 연결 상태: 정상', 'success');
      }
    } catch (error) {
      console.error('DB 상태 확인 오류:', error);
      showMessage('데이터베이스 상태 확인 실패', 'error');
    }
  };

  // 호텔 목록 불러오기 및 템플릿 변환
  const loadHotels = async () => {
    setIsLoading(true);
    try {
      const response = await fetch('/api/hotels');
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const hotels = await response.json();
      setHotels(hotels);
      
      // 호텔 데이터를 템플릿으로 변환
      const templateList = hotels.map(hotel => {
        const packageName = extractPackageFromHotel(hotel);
        return {
          id: hotel.id,
          hotelName: hotel.name,
          packageName,
          fullName: `${hotel.name} ${packageName}`,
          lastModified: hotel.updatedAt || hotel.createdAt,
          description: hotel.description,
          hasRooms: hotel.rooms?.length > 0,
          hasPackages: hotel.packages?.length > 0,
          data: hotel
        };
      });
      
      setTemplates(templateList);
      showMessage(`${hotels.length}개 템플릿을 불러왔습니다`, 'success');
    } catch (error) {
      console.error('호텔 목록 로드 오류:', error);
      showMessage('템플릿 목록 불러오기 실패', 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // 호텔에서 패키지명 추출
  const extractPackageFromHotel = (hotel) => {
    if (hotel.packages && hotel.packages.length > 0) {
      return hotel.packages[0].name;
    }
    
    // 호텔명에서 패키지명 추출 로직
    const name = hotel.name.toLowerCase();
    if (name.includes('조식')) return '조식 PKG';
    if (name.includes('오션')) return '오션 PKG';
    if (name.includes('비발디')) return '비발디 PKG';
    if (name.includes('로맨틱')) return '로맨틱 패키지';
    if (name.includes('pkg') || name.includes('패키지')) {
      const match = hotel.name.match(/([\w가-힣]+\s*PKG|[\w가-힣]+\s*패키지)/i);
      return match ? match[0] : '표준 PKG';
    }
    return '표준 PKG';
  };

  // 새 프로젝트 시작
  const startNewProject = () => {
    setIsCreatingNew(true);
    setNewHotelForm({
      name: '',
      description: '',
      address: '',
      phone: '',
      checkin_time: '15:00',
      checkout_time: '11:00'
    });
  };

  // 인라인 호텔 생성 핸들러
  const handleCreateNewHotel = () => {
    if (!newHotelForm.name.trim()) {
      showMessage('호텔명을 입력해주세요', 'error');
      return;
    }

    const newProject = {
      hotelName: newHotelForm.name,
      packageName: '표준 PKG',
      fullName: `${newHotelForm.name} 표준 PKG`,
      created: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      version: '1.0',
      isNew: true,
      isModified: false
    };
    
    setCurrentProject(newProject);
    
    // 새 프로젝트 데이터로 초기화
    const newData = {
      hotel: {
        name: newHotelForm.name,
        address: newHotelForm.address || '서울시 강남구 테헤란로 123',
        description: newHotelForm.description || '편안하고 아늑한 도심 속 휴식공간입니다.',
        image_url: '',
        phone: newHotelForm.phone || '02-1234-5678',
        checkin_time: newHotelForm.checkin_time,
        checkout_time: newHotelForm.checkout_time
      }
    };
    
    updateData(newData);
    showMessage('새 프로젝트를 시작했습니다', 'success');
  };

  // 인라인 호텔 생성 핸들러
  const handleCreateNewHotel = () => {
    if (!newHotelForm.name.trim()) {
      showMessage('호텔명을 입력해주세요', 'error');
      return;
    }

    const newProject = {
      hotelName: newHotelForm.name,
      packageName: '표준 PKG',
      fullName: `${newHotelForm.name} 표준 PKG`,
      created: new Date().toISOString(),
      lastModified: new Date().toISOString(),
      version: '1.0',
      isNew: true,
      isModified: false
    };
    
    setCurrentProject(newProject);
    
    // 새 프로젝트 데이터로 초기화
    const newData = {
      hotel: {
        name: newHotelForm.name,
        address: newHotelForm.address || '서울시 강남구 테헤란로 123',
        description: newHotelForm.description || '편안하고 아늑한 도심 속 휴식공간입니다.',
        image_url: '',
        phone: newHotelForm.phone || '02-1234-5678',
        checkin_time: newHotelForm.checkin_time,
        checkout_time: newHotelForm.checkout_time
      },
      rooms: [{
        roomType: '스탠다드',
        view: '시티뷰',
        amenities: ['무료 Wi-Fi', '에어컨', 'TV', '미니바'],
        roomSize: '25㎡',
        bedInfo: '퀸 베드 1개',
        maxOccupancy: 2,
        description: '편안한 숙면을 위한 퀸 베드가 구비된 스탠다드 룸입니다.',
        imageUrl: '',
        name: '스탠다드 룸'
      }],
      packages: [{
        name: '표준 PKG',
        description: '기본 패키지',
        price: 150000,
        includes: ['조식', '무료 Wi-Fi'],
        availableFrom: '2023-01-01',
        availableTo: '2023-12-31'
      }],
      facilities: {
        general: ['무료 Wi-Fi', '24시간 프런트 데스크', '엘리베이터'],
        business: ['비즈니스 센터', '회의실'],
        leisure: ['피트니스 센터', '사우나'],
        dining: ['레스토랑', '카페', '룸서비스']
      },
      checkin: {
        checkInTime: newHotelForm.checkin_time,
        checkOutTime: newHotelForm.checkout_time,
        earlyCheckIn: '추가 요금 발생',
        lateCheckOut: '추가 요금 발생'
      },
      pricing: {
        lodges: [{
          name: newHotelForm.name,
          rooms: [{
            roomType: '스탠다드',
            view: '시티뷰',
            prices: {
              weekday: 100000,
              friday: 120000,
              saturday: 150000
            }
          }]
        }],
        dayTypes: [
          { id: 'weekday', name: '주중(월~목)', type: 'weekday' },
          { id: 'friday', name: '금요일', type: 'friday' },
          { id: 'saturday', name: '토요일', type: 'saturday' }
        ]
      },
      cancel: {
        freeCancellation: '체크인 7일 전까지 무료 취소',
        cancellationFee: '체크인 3일 전~당일: 첫날 요금의 100%',
        noShow: '노쇼 시 전액 청구',
        modificationPolicy: '날짜 변경은 체크인 3일 전까지 가능'
      },
      booking: {
        reservationMethod: '온라인 예약 시스템',
        paymentMethods: ['신용카드', '계좌이체', '현금'],
        confirmationTime: '예약 후 24시간 이내 확인',
        specialRequests: '체크인 시 요청사항 전달 가능'
      },
      notices: [{
        title: '중요 안내',
        content: '체크인 시 신분증을 지참해 주세요.',
        type: 'important'
      }]
    };
    
    updateData(newData);
    setIsCreatingNew(false);
    showMessage(`새 호텔 "${newHotelForm.name}"이 생성되었습니다`, 'success');
  };

  // 인라인 폼 취소
  const cancelNewHotel = () => {
    setIsCreatingNew(false);
    setNewHotelForm({
      name: '',
      description: '',
      address: '',
      phone: '',
      checkin_time: '15:00',
      checkout_time: '11:00'
    });
  };

  // 템플릿 불러오기 (개선된 버전)
  const loadTemplate = async (templateId) => {
    setIsLoading(true);
    try {
      const response = await fetch(`/api/hotels/${templateId}`);
      if (!response.ok) {
        throw new Error(`템플릿 로드 실패: ${response.status}`);
      }
      
      const responseData = await response.json();
      const hotel = responseData.hotel || responseData;
      
      console.log('템플릿 로드된 데이터:', hotel);
      
      // 데이터 구조 변환 및 검증
      const transformedData = transformHotelDataToCurrentFormat(hotel);
      
      console.log('변환된 데이터:', transformedData);
      
      // 현재 프로젝트 정보 업데이트
      const template = templates.find(t => t.id === templateId);
      const packageName = extractPackageFromHotel(hotel);
      const hotelName = hotel.name;
      
      const newProject = {
        id: templateId,
        hotelName: hotelName,
        packageName: packageName,
        fullName: `${hotelName} ${packageName}`,
        loadedAt: new Date().toISOString(),
        lastModified: hotel.updatedAt || hotel.createdAt || new Date().toISOString(),
        isModified: false,
        isNew: false,
        version: '1.0'
      };
      
      setCurrentProject(newProject);
      
      // 메인 앱에 데이터 적용 (전체 데이터 업데이트)
      updateData(transformedData);

      showMessage(`"${hotelName} ${packageName}" 템플릿을 불러왔습니다.`, 'success');
    } catch (error) {
      console.error('템플릿 로드 오류:', error);
      showMessage(`템플릿 불러오기 실패: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // 호텔 데이터 변환 함수 (개선된 버전)
  const transformHotelDataToCurrentFormat = (hotel) => {
    // 기본 호텔 정보
    const hotelInfo = {
      name: hotel.name || '',
      address: hotel.address || '서울시 강남구 테헤란로 123',
      description: hotel.description || '편안하고 아늑한 도심 속 휴식공간입니다.',
      image_url: hotel.imageUrl || '',
      phone: hotel.phone || '02-1234-5678',
      email: hotel.email || '',
      website: hotel.website || '',
      checkin_time: '15:00',
      checkout_time: '11:00'
    };

    // 룸 정보 변환
    const rooms = hotel.rooms && hotel.rooms.length > 0 ? hotel.rooms.map(room => ({
      roomType: room.type || room.roomType || '스탠다드',
      view: room.view || '시티뷰',
      amenities: room.amenities || ['무료 Wi-Fi', '에어컨', 'TV', '미니바'],
      roomSize: room.structure || room.roomSize || '25㎡',
      bedInfo: room.bedType || room.bedInfo || '퀸 베드 1개',
      maxOccupancy: room.maxCapacity || room.maxOccupancy || 2,
      description: room.description || '편안한 숙면을 위한 퀸 베드가 구비된 스탠다드 룸입니다.',
      imageUrl: room.image || room.imageUrl || '',
      name: room.name || `${room.type || room.roomType || '스탠다드'} 룸`
    })) : [{
      roomType: '스탠다드',
      view: '시티뷰',
      amenities: ['무료 Wi-Fi', '에어컨', 'TV', '미니바'],
      roomSize: '25㎡',
      bedInfo: '퀸 베드 1개',
      maxOccupancy: 2,
      description: '편안한 숙면을 위한 퀸 베드가 구비된 스탠다드 룸입니다.',
      imageUrl: '',
      name: '스탠다드 룸'
    }];

    // 패키지 정보 변환
    const packages = hotel.packages && hotel.packages.length > 0 ? hotel.packages.map(pkg => ({
      name: pkg.name || '기본 패키지',
      description: pkg.description || '특별한 패키지',
      price: pkg.price || 150000,
      includes: pkg.options || pkg.includes || ['조식', '무료 Wi-Fi'],
      availableFrom: pkg.availableFrom || '2023-01-01',
      availableTo: pkg.availableTo || '2023-12-31'
    })) : [{
      name: extractPackageFromHotel(hotel),
      description: '기본 패키지',
      price: 150000,
      includes: ['조식', '무료 Wi-Fi'],
      availableFrom: '2023-01-01',
      availableTo: '2023-12-31'
    }];

    // 가격 정보 변환
    const pricing = hotel.priceConfiguration || {
      lodges: [{
        name: hotel.name,
        rooms: rooms.map(room => ({
          roomType: room.roomType,
          view: room.view,
          prices: {
            weekday: 100000,
            friday: 120000,
            saturday: 150000
          }
        }))
      }],
      dayTypes: [
        { id: 'weekday', name: '주중(월~목)', type: 'weekday' },
        { id: 'friday', name: '금요일', type: 'friday' },
        { id: 'saturday', name: '토요일', type: 'saturday' }
      ]
    };

    return {
      hotel: hotelInfo,
      rooms: rooms,
      packages: packages,
      facilities: hotel.facilities || {
        general: ['무료 Wi-Fi', '24시간 프런트 데스크', '엘리베이터'],
        business: ['비즈니스 센터', '회의실'],
        leisure: ['피트니스 센터', '사우나'],
        dining: ['레스토랑', '카페', '룸서비스']
      },
      checkin: hotel.checkin || {
        checkInTime: '15:00',
        checkOutTime: '11:00',
        earlyCheckIn: '추가 요금 발생',
        lateCheckOut: '추가 요금 발생'
      },
      pricing: pricing,
      cancel: hotel.cancel || {
        freeCancellation: '체크인 7일 전까지 무료 취소',
        cancellationFee: '체크인 3일 전~당일: 첫날 요금의 100%',
        noShow: '노쇼 시 전액 청구',
        modificationPolicy: '날짜 변경은 체크인 3일 전까지 가능'
      },
      booking: hotel.booking || {
        reservationMethod: '온라인 예약 시스템',
        paymentMethods: ['신용카드', '계좌이체', '현금'],
        confirmationTime: '예약 후 24시간 이내 확인',
        specialRequests: '체크인 시 요청사항 전달 가능'
      },
      notices: hotel.notices && hotel.notices.length > 0 ? hotel.notices.map(notice => ({
        title: notice.title || '중요 안내',
        content: notice.content || '체크인 시 신분증을 지참해 주세요.',
        type: notice.type || 'important'
      })) : [{
        title: '중요 안내',
        content: '체크인 시 신분증을 지참해 주세요.',
        type: 'important'
      }]
    };
  };

  // 프로젝트 저장 (새로 저장)
  const saveAsNewProject = async () => {
    if (!currentProject) {
      showMessage('저장할 프로젝트가 없습니다', 'error');
      return;
    }

    setIsLoading(true);
    try {
      // 저장할 데이터 준비
      const saveData = {
        name: currentProject.hotelName,
        address: currentData.hotel?.address || '서울시 강남구 테헤란로 123',
        description: currentData.hotel?.description || '편안하고 아늑한 도심 속 휴식공간입니다.',
        imageUrl: currentData.hotel?.image_url || '',
        phone: currentData.hotel?.phone || '02-1234-5678',
        email: currentData.hotel?.email || '',
        website: currentData.hotel?.website || '',
        rooms: currentData.rooms || [],
        packages: currentData.packages || [],
        facilities: currentData.facilities || {},
        checkin: currentData.checkin || {},
        priceConfiguration: currentData.pricing || {},
        cancel: currentData.cancel || {},
        booking: currentData.booking || {},
        notices: currentData.notices || []
      };

      const response = await fetch('/api/hotels', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(saveData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`저장 실패: ${response.status} - ${errorData.error || '알 수 없는 오류'}`);
      }

      const result = await response.json();
      
      // 프로젝트 정보 업데이트
      const updatedProject = {
        ...currentProject,
        id: result.hotel?.id || result.id,
        lastModified: new Date().toISOString(),
        isNew: false,
        isModified: false
      };

      setCurrentProject(updatedProject);
      showMessage(`"${currentProject.fullName}"을 새 템플릿으로 저장했습니다`, 'success');
      
      // 목록 새로고침
      await loadHotels();
    } catch (error) {
      console.error('프로젝트 저장 오류:', error);
      showMessage(`저장 중 오류가 발생했습니다: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // 기존 프로젝트 업데이트
  const updateExistingProject = async () => {
    if (!currentProject?.id) {
      showMessage('업데이트할 프로젝트가 없습니다', 'error');
      return;
    }

    setIsLoading(true);
    try {
      // 업데이트할 데이터 준비
      const updateData = {
        name: currentProject.hotelName,
        address: currentData.hotel?.address || '',
        description: currentData.hotel?.description || '',
        image_url: currentData.hotel?.image_url || currentData.hotel?.imageUrl || '',
        phone_number: currentData.hotel?.phone || '',
        email: currentData.hotel?.email || '',
        website: currentData.hotel?.website || '',
        rooms: currentData.rooms || [],
        packages: currentData.packages || [],
        notices: currentData.notices || []
      };

      const response = await fetch(`/api/hotels/${currentProject.id}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`업데이트 실패: ${response.status} - ${errorData.error || '알 수 없는 오류'}`);
      }

      const result = await response.json();
      
      // 프로젝트 정보 업데이트
      const updatedProject = {
        ...currentProject,
        lastModified: new Date().toISOString(),
        isModified: false
      };

      setCurrentProject(updatedProject);
      showMessage(`"${currentProject.fullName}"을 업데이트했습니다`, 'success');
      
      // 목록 새로고침
      await loadHotels();
    } catch (error) {
      console.error('프로젝트 업데이트 오류:', error);
      showMessage(`업데이트 중 오류가 발생했습니다: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // 템플릿 복사해서 새 프로젝트 시작
  const copyTemplate = async (templateId) => {
    await loadTemplate(templateId);
    
    // 복사된 것으로 표시
    if (currentProject) {
      const copiedProject = {
        ...currentProject,
        hotelName: currentProject.hotelName,
        packageName: currentProject.packageName,
        fullName: `${currentProject.hotelName} ${currentProject.packageName}`,
        isNew: true,
        isModified: true,
        version: '1.0',
        baseTemplateId: templateId,
        id: null // 새로 저장될 때까지 ID 제거
      };
      
      setCurrentProject(copiedProject);
      showMessage(`"${currentProject.fullName}"을 복사했습니다. 수정 후 저장하세요.`, 'info');
    }
  };

  // 프로젝트 삭제
  const deleteProject = async (projectId) => {
    const template = templates.find(t => t.id === projectId);
    if (!confirm(`"${template?.fullName}" 템플릿을 정말 삭제하시겠습니까?`)) return;

    setIsLoading(true);
    try {
      const response = await fetch(`/api/hotels?id=${projectId}`, {
        method: 'DELETE'
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`삭제 실패: ${response.status} - ${errorData.error || '알 수 없는 오류'}`);
      }

      showMessage(`"${template?.fullName}" 템플릿을 삭제했습니다`, 'success');
      
      // 현재 프로젝트가 삭제된 프로젝트인경우 초기화
      if (currentProject?.id === projectId) {
        setCurrentProject(null);
      }
      
      // 목록 새로고침
      await loadHotels();
    } catch (error) {
      console.error('프로젝트 삭제 오류:', error);
      showMessage(`삭제 중 오류가 발생했습니다: ${error.message}`, 'error');
    } finally {
      setIsLoading(false);
    }
  };

  // 호텔명 변경 (개선된 버전)
  const changeHotelName = (newHotelName) => {
    if (!newHotelName.trim()) {
      showMessage('호텔명을 입력해주세요', 'error');
      return;
    }

    // 현재 데이터 업데이트
    const updatedData = {
      ...currentData,
      hotel: {
        ...currentData.hotel,
        name: newHotelName.trim()
      }
    };

    updateData(updatedData);
    
    // 현재 프로젝트 정보도 업데이트
    if (currentProject) {
      const updatedProject = {
        ...currentProject,
        hotelName: newHotelName.trim(),
        fullName: `${newHotelName.trim()} ${currentProject.packageName}`,
        isModified: true
      };
      
      setCurrentProject(updatedProject);
      
      // localStorage에 저장
      try {
        localStorage.setItem('currentProject', JSON.stringify(updatedProject));
      } catch (error) {
        console.error('currentProject 저장 실패:', error);
      }
    }
    
    showMessage(`호텔명을 "${newHotelName}"로 변경했습니다`, 'success');
  };

  // 패키지명 변경 (개선된 버전)
  const changePackageName = (newPackageName) => {
    if (!newPackageName.trim()) {
      showMessage('패키지명을 입력해주세요', 'error');
      return;
    }

    // 현재 데이터 업데이트
    const updatedData = {
      ...currentData,
      packages: currentData.packages.length > 0 
        ? currentData.packages.map((pkg, index) => 
            index === 0 
              ? { ...pkg, name: newPackageName.trim() }
              : pkg
          )
        : [{
            name: newPackageName.trim(),
            description: '새 패키지',
            price: 150000,
            includes: ['조식', '무료 Wi-Fi'],
            availableFrom: '2023-01-01',
            availableTo: '2023-12-31'
          }]
    };

    updateData(updatedData);
    
    // 현재 프로젝트 정보도 업데이트
    if (currentProject) {
      const updatedProject = {
        ...currentProject,
        packageName: newPackageName.trim(),
        fullName: `${currentProject.hotelName} ${newPackageName.trim()}`,
        isModified: true
      };
      
      setCurrentProject(updatedProject);
      
      // localStorage에 저장
      try {
        localStorage.setItem('currentProject', JSON.stringify(updatedProject));
      } catch (error) {
        console.error('currentProject 저장 실패:', error);
      }
    }
    
    showMessage(`패키지명을 "${newPackageName}"로 변경했습니다`, 'success');
  };

  // 컴포넌트 마운트 시 초기화
  useEffect(() => {
    loadHotels();
    checkDatabaseStatus();
  }, []);

  // 현재 데이터 변경 감지 및 동기화
  useEffect(() => {
    if (currentProject && currentData) {
      // 현재 데이터에서 호텔명과 패키지명 추출
      const currentHotelName = currentData.hotel?.name || '';
      const currentPackageName = extractPackageName(currentData);
      
      // 프로젝트 정보와 다르면 업데이트
      if (currentProject.hotelName !== currentHotelName || 
          currentProject.packageName !== currentPackageName) {
        
        const updatedProject = {
          ...currentProject,
          hotelName: currentHotelName,
          packageName: currentPackageName,
          fullName: `${currentHotelName} ${currentPackageName}`.trim(),
          isModified: true,
          lastModified: new Date().toISOString()
        };
        
        console.log('프로젝트 정보 동기화:', updatedProject);
        setCurrentProject(updatedProject);
        
        // localStorage 업데이트
        try {
          localStorage.setItem('currentProject', JSON.stringify(updatedProject));
        } catch (error) {
          console.error('localStorage 저장 실패:', error);
        }
      }
    }
  }, [currentData]);

  // 현재 프로젝트 상태 계산
  const getProjectStatus = () => {
    if (!currentProject) return { text: '프로젝트 없음', color: '#6b7280' };
    
    if (currentProject.isNew) {
      return { text: '새 프로젝트', color: '#10b981' };
    }
    
    if (currentProject.isModified) {
      return { text: '수정됨', color: '#f59e0b' };
    }
    
    return { text: '저장됨', color: '#3b82f6' };
  };

  const projectStatus = getProjectStatus();

  return (
    <div style={{ 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      borderRadius: '15px',
      padding: '20px',
      color: 'white',
      fontFamily: 'Inter, sans-serif'
    }}>
      {/* 헤더 */}
      <div style={{ marginBottom: '25px' }}>
        <h3 style={{ 
          margin: '0 0 10px 0', 
          fontSize: '24px', 
          fontWeight: '700',
          display: 'flex',
          alignItems: 'center',
          gap: '10px'
        }}>
          🏨 프로젝트 관리
          {dbStatus && (
            <span style={{ 
              fontSize: '12px', 
              background: 'rgba(255,255,255,0.2)', 
              padding: '4px 8px', 
              borderRadius: '12px',
              fontWeight: 'normal'
            }}>
              {dbStatus.statistics?.hotels || 0}개 템플릿
            </span>
          )}
        </h3>
        
        {/* 메시지 표시 */}
        {message && (
          <div style={{ 
            padding: '12px 16px',
            borderRadius: '8px',
            marginBottom: '15px',
            background: message.type === 'error' ? 'rgba(239, 68, 68, 0.9)' :
                       message.type === 'success' ? 'rgba(34, 197, 94, 0.9)' :
                       'rgba(59, 130, 246, 0.9)',
            fontSize: '14px',
            fontWeight: '500'
          }}>
            {message.text}
          </div>
        )}
      </div>

      {/* 현재 작업 프로젝트 */}
      {currentProject && (
        <div style={{ 
          background: 'rgba(255,255,255,0.15)', 
          borderRadius: '12px', 
          padding: '20px',
          marginBottom: '25px',
          border: '1px solid rgba(255,255,255,0.2)'
        }}>
          <h4 style={{ 
            margin: '0 0 15px 0', 
            fontSize: '18px', 
            fontWeight: '600',
            display: 'flex',
            alignItems: 'center',
            gap: '10px'
          }}>
            📋 현재 작업: {currentProject.fullName}
            <span style={{ 
              fontSize: '12px',
              background: projectStatus.color,
              color: 'white',
              padding: '4px 8px',
              borderRadius: '12px',
              fontWeight: 'normal'
            }}>
              {projectStatus.text}
            </span>
          </h4>
          
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))', 
            gap: '15px',
            marginBottom: '20px'
          }}>
            <div>
              <label style={{ display: 'block', fontSize: '14px', marginBottom: '8px', opacity: 0.9 }}>
                🏨 호텔명
              </label>
              <input
                type="text"
                value={currentProject.hotelName}
                onChange={(e) => changeHotelName(e.target.value)}
                placeholder="호텔명 입력"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  borderRadius: '8px',
                  border: '1px solid rgba(255,255,255,0.3)',
                  background: 'rgba(255,255,255,0.1)',
                  color: 'white',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              />
            </div>
            
            <div>
              <label style={{ display: 'block', fontSize: '14px', marginBottom: '8px', opacity: 0.9 }}>
                📦 패키지명
              </label>
              <input
                type="text"
                value={currentProject.packageName}
                onChange={(e) => changePackageName(e.target.value)}
                placeholder="패키지명 입력"
                style={{
                  width: '100%',
                  padding: '10px 12px',
                  borderRadius: '8px',
                  border: '1px solid rgba(255,255,255,0.3)',
                  background: 'rgba(255,255,255,0.1)',
                  color: 'white',
                  fontSize: '14px',
                  fontWeight: '500'
                }}
              />
            </div>
          </div>
          
          <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap' }}>
            <button
              onClick={saveAsNewProject}
              disabled={isLoading}
              style={{
                background: 'rgba(34, 197, 94, 0.8)',
                border: 'none',
                borderRadius: '8px',
                padding: '10px 16px',
                color: 'white',
                fontWeight: '600',
                cursor: isLoading ? 'not-allowed' : 'pointer',
                fontSize: '14px',
                display: 'flex',
                alignItems: 'center',
                gap: '6px',
                opacity: isLoading ? 0.7 : 1
              }}
            >
              💾 새로 저장
            </button>
            
            {currentProject.id && !currentProject.isNew && (
              <button
                onClick={updateExistingProject}
                disabled={isLoading || !currentProject.isModified}
                style={{
                  background: currentProject.isModified ? 'rgba(245, 158, 11, 0.8)' : 'rgba(107, 114, 128, 0.5)',
                  border: 'none',
                  borderRadius: '8px',
                  padding: '10px 16px',
                  color: 'white',
                  fontWeight: '600',
                  cursor: (isLoading || !currentProject.isModified) ? 'not-allowed' : 'pointer',
                  fontSize: '14px',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '6px',
                  opacity: (isLoading || !currentProject.isModified) ? 0.7 : 1
                }}
              >
                🔄 업데이트
              </button>
            )}
          </div>
          
          {currentProject.lastModified && (
            <div style={{ 
              fontSize: '12px', 
              opacity: 0.8, 
              marginTop: '12px',
              display: 'flex',
              alignItems: 'center',
              gap: '6px'
            }}>
              🕒 최근 수정: {new Date(currentProject.lastModified).toLocaleString('ko-KR')}
            </div>
          )}
        </div>
      )}

      {/* 최근 작업 목록 */}
      {recentProjects.length > 0 && (
        <div style={{ marginBottom: '25px' }}>
          <h4 style={{ 
            margin: '0 0 15px 0', 
            fontSize: '18px', 
            fontWeight: '600',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}>
            🕒 최근 작업
          </h4>
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
            gap: '12px' 
          }}>
            {recentProjects.slice(0, 6).map((project, index) => (
              <div
                key={index}
                onClick={() => project.id && loadTemplate(project.id)}
                style={{
                  padding: '12px 15px',
                  background: 'rgba(255,255,255,0.1)',
                  border: '1px solid rgba(255,255,255,0.2)',
                  borderRadius: '8px',
                  cursor: 'pointer',
                  transition: 'all 0.2s',
                  fontSize: '14px'
                }}
                onMouseEnter={(e) => {
                  e.target.style.background = 'rgba(255,255,255,0.2)';
                }}
                onMouseLeave={(e) => {
                  e.target.style.background = 'rgba(255,255,255,0.1)';
                }}
              >
                <div style={{ fontWeight: '600', marginBottom: '6px' }}>
                  {project.fullName}
                </div>
                <div style={{ fontSize: '12px', opacity: 0.8 }}>
                  📅 {new Date(project.lastModified).toLocaleDateString('ko-KR')}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 조작 버튼들 및 인라인 호텔 생성 폼 */}
      <div style={{ marginBottom: '25px' }}>
        {/* 버튼들 */}
        <div style={{ display: 'flex', gap: '12px', flexWrap: 'wrap', marginBottom: isCreatingNew ? '20px' : '0' }}>
          <button
            onClick={startNewProject}
            disabled={isLoading || isCreatingNew}
            style={{
              background: isCreatingNew ? 'rgba(107, 114, 128, 0.5)' : 'rgba(34, 197, 94, 0.8)',
              border: 'none',
              borderRadius: '8px',
              padding: '12px 20px',
              color: 'white',
              fontWeight: '600',
              cursor: (isLoading || isCreatingNew) ? 'not-allowed' : 'pointer',
              fontSize: '14px',
              display: 'flex',
              alignItems: 'center',
              gap: '8px',
              opacity: (isLoading || isCreatingNew) ? 0.7 : 1
            }}
          >
            ➕ 새 호텔 생성
          </button>
        
        <button
          onClick={loadHotels}
          disabled={isLoading}
          style={{
            background: 'rgba(59, 130, 246, 0.8)',
            border: 'none',
            borderRadius: '8px',
            padding: '12px 20px',
            color: 'white',
            fontWeight: '600',
            cursor: isLoading ? 'not-allowed' : 'pointer',
            fontSize: '14px',
            display: 'flex',
            alignItems: 'center',
            gap: '8px',
            opacity: isLoading ? 0.7 : 1
          }}
        >
          🔄 새로고침
        </button>
      </div>

      {/* 템플릿 목록 */}
      <div>
        <h4 style={{ 
          margin: '0 0 15px 0', 
          fontSize: '18px', 
          fontWeight: '600',
          display: 'flex',
          alignItems: 'center',
          gap: '8px'
        }}>
          📚 저장된 템플릿
        </h4>
        
        {isLoading ? (
          <div style={{ 
            textAlign: 'center', 
            padding: '40px 0',
            fontSize: '16px'
          }}>
            🔄 로딩 중...
          </div>
        ) : templates.length === 0 ? (
          <div style={{ 
            textAlign: 'center', 
            padding: '40px 0',
            fontSize: '16px',
            opacity: 0.8
          }}>
            📝 저장된 템플릿이 없습니다.
          </div>
        ) : (
          <div style={{ 
            display: 'grid', 
            gridTemplateColumns: 'repeat(auto-fit, minmax(300px, 1fr))', 
            gap: '15px' 
          }}>
            {templates.map((template) => (
              <div
                key={template.id}
                style={{
                  padding: '18px',
                  background: 'rgba(255,255,255,0.1)',
                  border: '1px solid rgba(255,255,255,0.2)',
                  borderRadius: '12px',
                  transition: 'all 0.2s'
                }}
              >
                <div style={{ 
                  display: 'flex', 
                  justifyContent: 'space-between', 
                  alignItems: 'flex-start',
                  marginBottom: '12px'
                }}>
                  <h5 style={{ 
                    margin: 0, 
                    fontSize: '16px', 
                    fontWeight: '600',
                    lineHeight: '1.3'
                  }}>
                    {template.fullName}
                  </h5>
                  <div style={{ 
                    display: 'flex', 
                    gap: '4px',
                    fontSize: '14px',
                    opacity: 0.8
                  }}>
                    {template.hasRooms && <span>🏠</span>}
                    {template.hasPackages && <span>📦</span>}
                  </div>
                </div>
                
                <div style={{ 
                  fontSize: '14px', 
                  marginBottom: '15px',
                  opacity: 0.9,
                  lineHeight: '1.4'
                }}>
                  <div style={{ marginBottom: '4px' }}>🏨 {template.hotelName}</div>
                  <div style={{ marginBottom: '4px' }}>📦 {template.packageName}</div>
                  <div style={{ fontSize: '12px', opacity: 0.7 }}>
                    📅 {new Date(template.lastModified).toLocaleDateString('ko-KR', {
                      year: 'numeric',
                      month: 'short',
                      day: 'numeric'
                    })}
                  </div>
                </div>
                
                <div style={{ display: 'flex', gap: '8px' }}>
                  <button
                    onClick={() => loadTemplate(template.id)}
                    style={{
                      flex: 1,
                      padding: '8px 12px',
                      background: 'rgba(59, 130, 246, 0.8)',
                      border: 'none',
                      borderRadius: '6px',
                      color: 'white',
                      fontSize: '13px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.background = 'rgba(59, 130, 246, 1)';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.background = 'rgba(59, 130, 246, 0.8)';
                    }}
                  >
                    📂 불러오기
                  </button>
                  <button
                    onClick={() => copyTemplate(template.id)}
                    style={{
                      padding: '8px 12px',
                      background: 'rgba(34, 197, 94, 0.8)',
                      border: 'none',
                      borderRadius: '6px',
                      color: 'white',
                      fontSize: '13px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.background = 'rgba(34, 197, 94, 1)';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.background = 'rgba(34, 197, 94, 0.8)';
                    }}
                  >
                    📄 복사
                  </button>
                  <button
                    onClick={() => deleteProject(template.id)}
                    style={{
                      padding: '8px 12px',
                      background: 'rgba(239, 68, 68, 0.8)',
                      border: 'none',
                      borderRadius: '6px',
                      color: 'white',
                      fontSize: '13px',
                      fontWeight: '600',
                      cursor: 'pointer',
                      transition: 'all 0.2s'
                    }}
                    onMouseEnter={(e) => {
                      e.target.style.background = 'rgba(239, 68, 68, 1)';
                    }}
                    onMouseLeave={(e) => {
                      e.target.style.background = 'rgba(239, 68, 68, 0.8)';
                    }}
                  >
                    🗑️
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* 데이터베이스 상태 */}
      {dbStatus && (
        <div style={{ 
          marginTop: '25px',
          padding: '15px',
          background: 'rgba(255,255,255,0.1)',
          border: '1px solid rgba(255,255,255,0.2)',
          borderRadius: '10px'
        }}>
          <h4 style={{ 
            margin: '0 0 10px 0', 
            fontSize: '16px', 
            fontWeight: '600',
            display: 'flex',
            alignItems: 'center',
            gap: '8px'
          }}>
            📊 시스템 상태
          </h4>
          <div style={{ 
            fontSize: '14px',
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: '10px',
            opacity: 0.9
          }}>
            <div>📚 총 템플릿: {dbStatus.statistics?.hotels || 0}개</div>
            <div>
              🔗 DB 상태: {dbStatus.success ? (
                <span style={{ color: '#10b981' }}>✅ 정상</span>
              ) : (
                <span style={{ color: '#ef4444' }}>❌ 오류</span>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 