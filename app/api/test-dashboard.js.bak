import { exec } from 'child_process';
import { promisify } from 'util';
import os from 'os';
import path from 'path'; // Added for path.join

const execAsync = promisify(exec);

export default async function handler(req, res) {
  const { method } = req;

  switch (method) {
    case 'GET':
      return handleGetStatus(req, res);
    case 'POST':
      return handlePostAction(req, res);
    default:
      res.setHeader('Allow', ['GET', 'POST']);
      res.status(405).end(`Method ${method} Not Allowed`);
  }
}

// ?곹깭 ?뺤씤
async function handleGetStatus(req, res) {
  try {
    const status = await getSystemStatus();
    res.status(200).json(status);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
}

// ?≪뀡 ?ㅽ뻾
async function handlePostAction(req, res) {
  console.log(`[API] Detail ?붿껌 蹂몃Ц:`, req.body);
  console.log(`[API] Detail Content-Type:`, req.headers['content-type']);
  
  const { action } = req.body || {};
  
  console.log(`[API] Detail ?≪뀡 ?붿껌: ${action}`);

  if (!action) {
    console.log(`[API] Detail ?≪뀡 ?꾨씫`);
    return res.status(400).json({ 
      error: 'action parameter is required', 
      success: false,
      receivedBody: req.body 
    });
  }

  try {
    let result;
    switch (action) {
      case 'start-server':
        result = await startServer();
        break;
      case 'stop-server':
        result = await stopServer();
        break;
      case 'run-e2e-tests':
        result = await runE2ETests();
        break;
      case 'run-all-tests':
        result = await runAllTests();
        break;
      case 'check-db':
        result = await checkDatabase();
        break;
      default:
        console.log(`[API] Detail ?????녿뒗 ?≪뀡: ${action}`);
        return res.status(400).json({ error: `Unknown action: ${action}`, success: false });
    }
    
    console.log(`[API] Detail ?≪뀡 寃곌낵:`, result);
    res.status(200).json({ ...result, action, timestamp: new Date().toISOString() });
  } catch (error) {
    console.error(`[API] Detail ?≪뀡 ?ㅻ쪟:`, error);
    res.status(500).json({ 
      error: error.message, 
      action, 
      success: false, 
      timestamp: new Date().toISOString() 
    });
  }
}

// ?쒖뒪??紐⑤땲?곕쭅 ?뺣낫 ?섏쭛 - 媛꾩냼??
async function getSystemMonitoring() {
  const monitoring = {
    timestamp: new Date().toISOString(),
    localTime: new Date().toLocaleString('ko-KR', { 
      timeZone: 'Asia/Seoul',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    }),
    uptime: formatUptime(os.uptime()),
    cpu: 0, // CPU ?ъ슜瑜?怨꾩궛 ?쒓굅 - 由ъ냼???덉빟
    memory: Math.round(((os.totalmem() - os.freemem()) / os.totalmem()) * 100),
    temperature: null, // ?⑤룄 痢≪젙 ?쒓굅 - 由ъ냼???덉빟
    processCount: 0,
    networkStatus: '?뺤긽'
  };

  // ?꾨줈?몄뒪 ??怨꾩궛 ?쒓굅 - 由ъ냼???덉빟
  // try {
  //   const { stdout } = await execAsync('tasklist /FI "IMAGENAME eq node.exe" /NH');
  //   const lines = stdout.split('\n').filter(line => line.trim() && line.includes('node.exe'));
  //   monitoring.processCount = lines.length;
  // } catch (error) {
  //   monitoring.processCount = 0;
  // }

  return monitoring;
}

// CPU ?ъ슜瑜?痢≪젙
async function getCPUUsage() {
  try {
    if (process.platform === 'win32') {
      const { stdout } = await execAsync('wmic cpu get loadpercentage /value');
      const match = stdout.match(/LoadPercentage=(\d+)/);
      return match ? parseInt(match[1]) : 0;
    } else {
      const { stdout } = await execAsync('top -bn1 | grep "Cpu(s)" | awk \'{print $2}\' | cut -d\'%\' -f1');
      return parseFloat(stdout) || 0;
    }
  } catch (error) {
    return 0;
  }
}

// ?⑤룄 痢≪젙 (Windows)
async function getTemperature() {
  try {
    if (process.platform === 'win32') {
      const { stdout } = await execAsync('wmic /namespace:\\\\root\\wmi PATH MSAcpi_ThermalZoneTemperature get CurrentTemperature /value');
      const match = stdout.match(/CurrentTemperature=(\d+)/);
      if (match) {
        // Kelvin??Celsius濡?蹂??
        const kelvin = parseInt(match[1]) / 10;
        const celsius = kelvin - 273.15;
        return Math.round(celsius);
      }
    }
    return null;
  } catch (error) {
    return null;
  }
}

// ?낇????щ㎎??
function formatUptime(seconds) {
  const days = Math.floor(seconds / 86400);
  const hours = Math.floor((seconds % 86400) / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  
  if (days > 0) return `${days}일 ${hours}시간 ${minutes}분`;
  if (hours > 0) return `${hours}시간 ${minutes}분`;
  return `${minutes}분`;
}

// ?쒖뒪???곹깭 ?뺤씤
async function getSystemStatus() {
  const status = {
    serverRunning: false,
    dbConnected: false,
    monitoring: null
  };

  try {
    // ?쒕쾭 ?곹깭 ?뺤씤
    const isPortOpen = await checkPort(process.env.PORT || 3900);
    status.serverRunning = isPortOpen;

    // DB ?곹깭 ?뺤씤
    try {
      if (process.env.DATABASE_URL) {
        status.dbConnected = true;
      } else {
        // SQLite ?뚯씪 議댁옱 ?뺤씤
        const fs = require('fs');
        const dbPath = path.join(process.cwd(), 'prisma', 'dev.db');
        status.dbConnected = fs.existsSync(dbPath);
      }
    } catch (error) {
      status.dbConnected = false;
    }

    // ?쒖뒪??紐⑤땲?곕쭅
    status.monitoring = await getSystemMonitoring();

  } catch (error) {
    console.error('?쒖뒪???곹깭 ?뺤씤 ?ㅻ쪟:', error);
    status.error = error.message;
  }

  return status;
}

// ?ы듃 ?뺤씤
async function checkPort(port) {
  return new Promise((resolve) => {
    const net = require('net');
    const socket = new net.Socket();
    
    socket.setTimeout(1000);
    
    socket.on('connect', () => {
      socket.destroy();
      resolve(true);
    });
    
    socket.on('timeout', () => {
      socket.destroy();
      resolve(false);
    });
    
    socket.on('error', () => {
      socket.destroy();
      resolve(false);
    });
    
    socket.connect(port, 'localhost');
  });
}

// ?쒕쾭 ?쒖옉
async function startServer() {
  try {
    const { stdout, stderr } = await execAsync('npm run dev', { 
      cwd: process.cwd(),
      detached: true,
      stdio: 'ignore'
    });
    return { message: 'Detail ?쒕쾭 ?쒖옉 紐낅졊 ?ㅽ뻾??, success: true };
  } catch (error) {
    return { message: `Detail ?쒕쾭 ?쒖옉 ?ㅽ뙣: ${error.message}`, success: false };
  }
}

// ?쒕쾭 以묒?
async function stopServer() {
  try {
    const { stdout, stderr } = await execAsync('taskkill /F /IM node.exe');
    return { message: 'Detail ?쒕쾭 以묒? 紐낅졊 ?ㅽ뻾??, success: true };
  } catch (error) {
    return { message: `Detail ?쒕쾭 以묒? ?ㅽ뙣: ${error.message}`, success: false };
  }
}

// E2E ?뚯뒪???ㅽ뻾
async function runE2ETests() {
  try {
    const { stdout, stderr } = await execAsync('npx playwright test --reporter=line', { 
      cwd: process.cwd(),
      timeout: 60000
    });
    return { message: 'Detail E2E ?뚯뒪???ㅽ뻾 ?꾨즺', success: true, output: stdout };
  } catch (error) {
    return { message: `Detail E2E ?뚯뒪???ㅽ뙣: ${error.message}`, success: false, error: error.stderr };
  }
}

// ?꾩껜 ?뚯뒪???ㅽ뻾
async function runAllTests() {
  try {
    // ?쒕쾭 ?쒖옉
    await startServer();
    
    // 10珥??湲?
    await new Promise(resolve => setTimeout(resolve, 10000));
    
    // E2E ?뚯뒪???ㅽ뻾
    const testResult = await runE2ETests();
    
    return { 
      message: 'Detail ?꾩껜 ?뚯뒪???ㅽ뻾 ?꾨즺', 
      success: testResult.success, 
      server: '?쒖옉??,
      tests: testResult
    };
  } catch (error) {
    return { message: `Detail ?꾩껜 ?뚯뒪???ㅽ뙣: ${error.message}`, success: false };
  }
}

// DB ?곌껐 ?뺤씤
async function checkDatabase() {
  try {
    console.log('[DB] Detail DB ?곌껐 ?뺤씤 ?쒖옉...');
    
    if (!process.env.DATABASE_URL) {
      console.log('[DB] Detail DATABASE_URL 誘몄꽕??);
      return { 
        status: '??Detail DATABASE_URL 誘몄꽕??, 
        success: false, 
        message: 'DATABASE_URL ?섍꼍蹂?섍? ?ㅼ젙?섏? ?딆븯?듬땲??' 
      };
    }

    // ?щ컮瑜?import ?ъ슜
    const { sql } = await import('../../lib/db.js');
    
    if (typeof sql !== 'function') {
      console.log('[DB] Detail sql ?⑥닔媛 ?щ컮瑜댁? ?딆쓬');
      return { 
        status: '??Detail DB ?곌껐 ?ㅽ뙣: sql ?⑥닔 ?ㅻ쪟', 
        success: false, 
        message: 'sql ?⑥닔媛 ?щ컮瑜닿쾶 濡쒕뱶?섏? ?딆븯?듬땲??' 
      };
    }

    console.log('[DB] Detail DB 荑쇰━ ?ㅽ뻾 以?..');
    const result = await sql`SELECT 1 as test`;
    
    console.log('[DB] Detail DB ?곌껐 ?깃났:', result);
    return { 
      status: '??Detail DB ?곌껐 ?깃났', 
      success: true, 
      message: '?곗씠?곕쿋?댁뒪 ?곌껐???뺤긽?낅땲??',
      result 
    };
  } catch (error) {
    console.error('[DB] Detail DB ?곌껐 ?ㅻ쪟:', error);
    return { 
      status: `??Detail DB ?곌껐 ?ㅽ뙣: ${error.message}`, 
      success: false, 
      message: error.message,
      error: error.message 
    };
  }
} 
