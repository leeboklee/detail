import { exec } from 'child_process';
import { promisify } from 'util';
import { chromium } from 'playwright';

const execAsync = promisify(exec);

class AutoBrowserRefresh {
  constructor(port = 3900) {
    this.port = port;
    this.url = `http://localhost:${port}`;
    this.browser = null;
    this.page = null;
    this.isWindows = process.platform === 'win32';
  }

  async checkServerStatus() {
    try {
      const { stdout } = await execAsync(`netstat -ano | findstr :${this.port}`);
      return stdout.includes(`:${this.port}`);
    } catch (error) {
      return false;
    }
  }

  async waitForServer(maxAttempts = 30, interval = 2000) {
    console.log(`‚è≥ ÏÑúÎ≤Ñ ÏãúÏûë ÎåÄÍ∏∞ Ï§ë... (Ìè¨Ìä∏: ${this.port})`);
    
    for (let i = 0; i < maxAttempts; i++) {
      const isRunning = await this.checkServerStatus();
      if (isRunning) {
        console.log('‚úÖ ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.');
        return true;
      }
      
      console.log(`‚è≥ ÎåÄÍ∏∞ Ï§ë... (${i + 1}/${maxAttempts})`);
      await new Promise(resolve => setTimeout(resolve, interval));
    }
    
    console.log('‚ùå ÏÑúÎ≤Ñ ÏãúÏûë ÏãúÍ∞Ñ Ï¥àÍ≥º');
    return false;
  }

  async initBrowser() {
    console.log('üåê Î∏åÎùºÏö∞Ï†Ä Ï¥àÍ∏∞Ìôî Ï§ë...');
    
    this.browser = await chromium.launch({ 
      headless: false,
      args: [
        '--no-sandbox', 
        '--disable-dev-shm-usage',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor'
      ]
    });
    
    this.page = await this.browser.newPage();
    
    // Ï∫êÏãú ÎπÑÌôúÏÑ±Ìôî
    await this.page.setExtraHTTPHeaders({
      'Cache-Control': 'no-cache, no-store, must-revalidate',
      'Pragma': 'no-cache',
      'Expires': '0'
    });
  }

  async openAndRefresh() {
    try {
      console.log(`üöÄ Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Î∞è ÏÉàÎ°úÍ≥†Ïπ®: ${this.url}`);
      
      // 1Îã®Í≥Ñ: ÌéòÏù¥ÏßÄ Î°úÎìú
      await this.page.goto(this.url, { 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      // 2Îã®Í≥Ñ: Ï∫êÏãú ÏÇ≠Ï†ú
      console.log('üóëÔ∏è Î∏åÎùºÏö∞Ï†Ä Ï∫êÏãú ÏÇ≠Ï†ú Ï§ë...');
      await this.page.evaluate(() => {
        if ('caches' in window) {
          caches.keys().then(names => {
            names.forEach(name => {
              caches.delete(name);
            });
          });
        }
        if ('localStorage' in window) {
          localStorage.clear();
        }
        if ('sessionStorage' in window) {
          sessionStorage.clear();
        }
      });

      // 3Îã®Í≥Ñ: Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ®
      console.log('üîÑ Í∞ïÏ†ú ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìñâ...');
      await this.page.reload({ 
        waitUntil: 'networkidle',
        timeout: 30000 
      });

      // 4Îã®Í≥Ñ: ÌïòÏù¥ÎìúÎ†àÏù¥ÏÖò ÎåÄÍ∏∞
      console.log('‚è≥ ÌïòÏù¥ÎìúÎ†àÏù¥ÏÖò ÎåÄÍ∏∞ Ï§ë...');
      await this.waitForHydration();

      console.log('‚úÖ Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Î∞è ÏÉàÎ°úÍ≥†Ïπ® ÏôÑÎ£å!');
      return true;

    } catch (error) {
      console.error('‚ùå Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Ïã§Ìå®:', error.message);
      return false;
    }
  }

  async waitForHydration() {
    try {
      await this.page.waitForFunction(
        () => {
          const appContainer = document.querySelector('[data-hydrated]');
          const buttons = document.querySelectorAll('button');
          const loadingElements = document.querySelectorAll('.spinner, .loading, .animate-spin');
          
          return appContainer?.getAttribute('data-hydrated') === 'true' && 
                 buttons.length > 0 && 
                 loadingElements.length === 0;
        },
        { timeout: 15000 }
      );
      console.log('‚úÖ ÌïòÏù¥ÎìúÎ†àÏù¥ÏÖò ÏôÑÎ£å');
    } catch (error) {
      console.log('‚è∞ ÌïòÏù¥ÎìúÎ†àÏù¥ÏÖò ÎåÄÍ∏∞ ÏãúÍ∞Ñ Ï¥àÍ≥º, Í≥ÑÏÜç ÏßÑÌñâ');
    }
  }

  async close() {
    if (this.browser) {
      await this.browser.close();
    }
  }

  async autoRefresh() {
    const serverRunning = await this.waitForServer();
    if (!serverRunning) {
      console.log('‚ùå ÏÑúÎ≤ÑÍ∞Ä Ïã§ÌñâÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
      return false;
    }

    try {
      await this.initBrowser();
      const success = await this.openAndRefresh();
      return success;
    } catch (error) {
      console.error('‚ùå ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®:', error.message);
      return false;
    }
  }
}

// CLI ÏÇ¨Ïö©Î≤ï
if (import.meta.url === `file://${process.argv[1]}`) {
  const refresher = new AutoBrowserRefresh();
  
  refresher.autoRefresh()
    .then(success => {
      if (success) {
        console.log('\nüéâ ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® ÏÑ±Í≥µ!');
      } else {
        console.log('\n‚ö†Ô∏è ÏûêÎèô ÏÉàÎ°úÍ≥†Ïπ® Ïã§Ìå®.');
      }
    })
    .catch(error => {
      console.error('‚ùå Ïä§ÌÅ¨Î¶ΩÌä∏ Ïã§Ìñâ Ïã§Ìå®:', error.message);
    })
    .finally(async () => {
      await refresher.close();
    });
}

export default AutoBrowserRefresh; 